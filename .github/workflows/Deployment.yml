name: Main Workflow

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy and Restart
        env:
          SERVER_USER: ${{ secrets.USERNAME }}
          SERVER_IP: ${{ secrets.HOST }}
          PROJECT_DIR: ${{ secrets.PROJECT_DIR }}
          PM2_PROCESS_NAME: ${{ secrets.PM2_PROCESS_NAME }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'ENDSSH'
          set -e

          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -f "$HOME/.profile" ] && source "$HOME/.profile"

          echo "Changing to project directory: $PROJECT_DIR"
          cd ${{ secrets.PROJECT_DIR }}

          [ -d ".next.bak" ] && rm -rf .next.bak
          [ -d ".next" ] && mv .next .next.bak

          echo "Pulling latest code from git"
          git fetch origin main
          git reset --hard origin/main

          echo "Setting up .env file"
          cat > .env << EOT
          CONTRIBUTION_GRAPH_SECRET=${{ secrets.CONTRIBUTION_GRAPH_SECRET }}
          REPO_NAME=${{ secrets.REPO_NAME }}
          RESEND_API=${{ secrets.RESEND_API }}
          RESEND_TO_EMAIL=${{ secrets.RESEND_TO_EMAIL }}
          RESEND_FROM_EMAIL=${{ secrets.RESEND_FROM_EMAIL }}
          RESEND_USER_MAIL_SENDER_MAIL=${{ secrets.RESEND_USER_MAIL_SENDER_MAIL }}
          NEXTAUTH_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          AUTH_TRUST_HOST=${{ secrets.AUTH_TRUST_HOST }}
          NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
          NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
          EOT

          echo "Installing dependencies"
          command -v pnpm >/dev/null || npm install -g pnpm
          command -v pm2 >/dev/null || npm install -g pm2

          pnpm install --frozen-lockfile --prefer-offline
          pnpm run ins
          NEXT_TELEMETRY_DISABLED=1 pnpm run build

          if [ $? -eq 0 ]; then
            echo "Build successful, removing backup and restarting PM2"
            rm -rf .next.bak
            pm2 restart ${{ secrets.PM2_PROCESS_NAME }} --update-env
            echo "Deployment completed successfully"
          else
            echo "Build failed, restoring backup"
            rm -rf .next
            [ -d ".next.bak" ] && mv .next.bak .next
            echo "Deployment failed, previous version restored"
            exit 1
          fi
          ENDSSH